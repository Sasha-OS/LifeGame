'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var asyncChainMethods = null;

// Transforms function with args arguments and callback
// to function with args as separate values and callback
//   fn - function, callback-last / err-first
// Returns: function
var toAsync = function toAsync(fn) {
  return function () {
    for (var _len = arguments.length, argsCb = Array(_len), _key = 0; _key < _len; _key++) {
      argsCb[_key] = arguments[_key];
    }

    var len = argsCb.length - 1;
    var callback = argsCb[len];
    var args = argsCb.slice(0, len);
    return fn(args, callback);
  };
};

var asAsync = function asAsync(fn) // array, its argumants
{
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var wrapped = fn.bind.apply(fn, [null].concat(args));

  var _loop = function _loop(name) {
    var method = asyncChainMethods[name];
    wrapped[name] = function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return asAsync(method.apply(undefined, [wrapped].concat(args)));
    };
  };

  for (var name in asyncChainMethods) {
    _loop(name);
  }
  return wrapped;
};

var of = function of() {
  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return (// array
    asAsync(function (callback) {
      return callback.apply(undefined, [null].concat(args));
    })
  );
};

var concat = function concat(
// Hint: concat :: Monoid m => a -> a -> a
fn1, // function
fn2 // function
) {
  return toAsync(function (args1, callback) {
    return fn1.apply(undefined, _toConsumableArray(args1).concat([function (err) {
      for (var _len5 = arguments.length, args2 = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args2[_key5 - 1] = arguments[_key5];
      }

      if (err !== null) callback(err);else fn2.apply(undefined, args2.concat([callback]));
    }]));
  });
};

var fmap = function fmap(
// Hint: fmap :: Functor f => (a -> b) -> f a -> f b
fn1, // function
f // function
) {
  var fn2 = toAsync(function (args, callback) {
    return of(f.apply(undefined, _toConsumableArray(args)))(callback);
  });
  return concat(fn1, fn2);
};

var ap = function ap(
// Apply
// Hint: <*> :: Applicative f => f (a -> b) -> f a -> f b
fn, // function
funcA // function
) {
  return concat(funcA, function (f, callback) {
    return fmap(fn, f)(callback);
  });
};

asyncChainMethods = { fmap: fmap, ap: ap, concat: concat };

module.exports = {
  toAsync: toAsync,
  asAsync: asAsync,
  of: of,
  concat: concat,
  fmap: fmap,
  ap: ap
};