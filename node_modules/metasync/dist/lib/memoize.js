'use strict';

function Memoized() {}

// Create memoized function
//   fn - function, sync or async
// Returns: function, memoized
var memoize = function memoize(fn) {
  var cache = new Map();

  var memoized = function memoized() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var callback = args.pop();
    var key = args[0];
    var record = cache.get(key);
    if (record) {
      callback(record.err, record.data);
      return;
    }
    fn.apply(undefined, args.concat([function (err, data) {
      memoized.add(key, err, data);
      memoized.emit('memoize', key, err, data);
      callback(err, data);
    }]));
  };

  var fields = {
    cache: cache,
    timeout: 0,
    limit: 0,
    size: 0,
    maxSize: 0,
    maxCount: 0,
    events: {
      timeout: null,
      memoize: null,
      overflow: null,
      add: null,
      del: null,
      clear: null
    }
  };

  Object.setPrototypeOf(memoized, Memoized.prototype);
  return Object.assign(memoized, fields);
};

Memoized.prototype.clear = function () {
  this.emit('clear');
  this.cache.clear();
};

Memoized.prototype.add = function (key, err, data) {
  this.emit('add', err, data);
  this.cache.set(key, { err: err, data: data });
  return this;
};

Memoized.prototype.del = function (key) {
  this.emit('del', key);
  this.cache.delete(key);
  return this;
};

Memoized.prototype.get = function (key, callback) {
  var record = this.cache.get(key);
  callback(record.err, record.data);
  return this;
};

Memoized.prototype.on = function (eventName, // string
listener // function, handler
// on('memoize', function(err, data))
// on('add', function(key, err, data))
// on('del', function(key))
// on('clear', function())
) {
  if (eventName in this.events) {
    this.events[eventName] = listener;
  }
};

Memoized.prototype.emit = function (
// Emit Collector events
eventName) // rest arguments
{
  var event = this.events[eventName];

  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  if (event) event.apply(undefined, args);
};

module.exports = { memoize: memoize };