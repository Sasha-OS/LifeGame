'use strict';

var common = require('@metarhia/common');

// Convert source to callback-last contract
//   source - promise or regular synchronous function
// Returns: callback, function
var callbackify = function callbackify(source) {
  if (typeof source === 'function') {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var callback = common.unsafeCallback(args);
      if (callback) callback(null, source.apply(undefined, args));
    };
  } else {
    var callback = null;
    var fulfilled = function fulfilled(value) {
      if (callback) callback(null, value);
    };
    var rejected = function rejected(reason) {
      if (callback) callback(reason);
    };
    source.then(fulfilled).catch(rejected);
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      callback = common.unsafeCallback(args);
    };
  }
};

// Convert async function to Promise object
//   func - function, callback-last function
// Returns: object, Promise instance
var promisify = function promisify(func) {
  var promisified = function promisified() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var promise = new Promise(function (resolve, reject) {
      func.apply(undefined, args.concat([function (err, data) {
        if (err) reject(err);else resolve(data);
      }]));
    });
    return promise;
  };
  return promisified;
};

// Convert sync function to Promise object
//   func - function, regular synchronous function
// Returns: object, Promise instance
var promisifySync = function promisifySync(func) {
  return function () {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return new Promise(function (resolve, reject) {
      var result = func.apply(undefined, args);
      if (result instanceof Error) reject(result);else resolve(result);
    });
  };
};

module.exports = {
  callbackify: callbackify,
  promisify: promisify,
  promisifySync: promisifySync
};