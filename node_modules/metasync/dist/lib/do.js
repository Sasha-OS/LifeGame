'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function Do() {}

var chain = function chain(fn) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var current = function current(done) {
    if (done) current.done = done;
    if (current.prev) {
      current.prev.next = current;
      current.prev();
    } else {
      current.forward();
    }
    return current;
  };

  var prev = undefined instanceof Do ? undefined : null;
  var fields = { prev: prev, fn: fn, args: args, done: null };

  Object.setPrototypeOf(current, Do.prototype);
  return Object.assign(current, fields);
};

Do.prototype.do = function (fn) {
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return chain.call.apply(chain, [this, fn].concat(args));
};

Do.prototype.forward = function () {
  var _this = this;

  if (this.fn) {
    this.fn.apply(this, _toConsumableArray(this.args).concat([function (err, data) {
      var next = _this.next;
      if (next) {
        if (next.fn) next.forward();
      } else if (_this.done) {
        _this.done(err, data);
      }
    }]));
  }
};

module.exports = { do: chain };