'use strict';

var TYPE_ERROR = 'Metasync: Collect unexpected type';
var COLLECT_TIMEOUT = 'Metasync: Collector timed out';

// Collector instance constructor
//   expected - number or array of string, count or keys
// Returns: functor, collector
var collect = function collect(expected) {
  var isCount = typeof expected === 'number';
  var isKeys = Array.isArray(expected);
  if (!(isCount || isKeys)) throw new TypeError(TYPE_ERROR);
  var keys = null;
  if (isKeys) {
    keys = new Set(expected);
    expected = expected.length;
  }
  var count = 0;
  var timer = null;
  var onDone = null;
  var isDistinct = false;
  var isDone = false;
  var data = {};

  var collector = function collector(key, err, value) {
    if (isDone) return collector;
    if (!isDistinct || !(key in data)) {
      if (!isCount && !keys.has(key)) return collector;
      count++;
    }
    if (err) {
      collector.finalize(err, data);
      return collector;
    }
    data[key] = value;
    if (expected === count) {
      if (timer) clearTimeout(timer);
      collector.finalize(null, data);
    }
    return collector;
  };

  var methods = {
    pick: function pick(key, value) {
      return collector(key, null, value);
    },
    fail: function fail(key, err) {
      return collector(key, err);
    },

    take: function take(key, fn) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      fn.apply(undefined, args.concat([function (err, data) {
        return collector(key, err, data);
      }]));
      return collector;
    },

    timeout: function timeout(msec) {
      if (msec) {
        timer = setTimeout(function () {
          var err = new Error(COLLECT_TIMEOUT);
          collector.finalize(err, data);
        }, msec);
        timer.unref();
      }
      return collector;
    },

    // callback - function, (error, data)
    done: function done(callback) {
      onDone = callback;
      return collector;
    },

    finalize: function finalize(err, data) {
      if (isDone) return collector;
      isDone = true;
      if (onDone) onDone(err, data);
      return collector;
    },

    distinct: function distinct() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      isDistinct = value;
      return collector;
    }
  };

  return Object.assign(collector, methods);
};

module.exports = { collect: collect };