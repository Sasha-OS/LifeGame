'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var duplicate = function duplicate(factory, n) {
  return Array.from({ length: n }, factory);
};

var provide = function provide(callback) {
  return function (item) {
    setImmediate(function () {
      callback(item);
    });
  };
};

var poolify = function poolify(factory, min, norm, max) {
  var allocated = norm;
  var pool = function pool(par) {
    if (Array.isArray(par)) {
      while (par.length) {
        var item = par.shift();
        var delayed = pool.delayed.shift();
        if (delayed) delayed(item);else pool.items.push(item);
      }
      return pool;
    }
    if (pool.items.length < min && allocated < max) {
      var _pool$items;

      var grow = Math.min(max - allocated, norm - pool.items.length);
      allocated += grow;
      var items = duplicate(factory, grow);
      (_pool$items = pool.items).push.apply(_pool$items, _toConsumableArray(items));
    }
    var res = pool.items.pop();
    if (!par) return res;
    var callback = provide(par);
    if (res) callback(res);else pool.delayed.push(callback);
    return pool;
  };
  return Object.assign(pool, {
    items: duplicate(factory, norm),
    delayed: []
  });
};

module.exports = { poolify: poolify };