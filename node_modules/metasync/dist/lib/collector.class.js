'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var common = require('@metarhia/common');

var UNEXPECTED_KEY = 'Metasync: unexpected key: ';
var COLLECT_TIMEOUT = 'Metasync: Collector timed out';
var COLLECT_CANCELED = 'Metasync: Collector cancelled';

var Collector = function () {
  function Collector(expected // number or array of string, count or keys
  ) {
    _classCallCheck(this, Collector);

    this.expectKeys = Array.isArray(expected) ? new Set(expected) : null;
    this.expected = this.expectKeys ? expected.length : expected;
    this.keys = new Set();
    this.count = 0;
    this.timer = null;
    this.onDone = common.emptiness;
    this.isDistinct = false;
    this.isDone = false;
    this.data = {};
  }

  _createClass(Collector, [{
    key: 'collect',
    value: function collect(key, err, value) {
      if (this.isDone) return this;
      if (err) {
        this.finalize(err, this.data);
        return this;
      }
      if (this.expectKeys && !this.expectKeys.has(key)) {
        if (this.isDistinct) {
          var _err = new Error(UNEXPECTED_KEY + key);
          this.finalize(_err, this.data);
          return this;
        }
      } else if (!this.keys.has(key)) {
        this.count++;
      }
      this.data[key] = value;
      this.keys.add(key);
      if (this.expected === this.count) {
        this.finalize(null, this.data);
      }
      return this;
    }
  }, {
    key: 'pick',
    value: function pick(key, value) {
      this.collect(key, null, value);
      return this;
    }
  }, {
    key: 'fail',
    value: function fail(key, err) {
      this.collect(key, err);
      return this;
    }
  }, {
    key: 'take',
    value: function take(key, fn) {
      var _this = this;

      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      fn.apply(undefined, args.concat([function (err, data) {
        _this.collect(key, err, data);
      }]));
      return this;
    }
  }, {
    key: 'timeout',
    value: function timeout(msec) {
      var _this2 = this;

      if (this.timer) {
        clearTimeout(this.timer);
        this.timer = null;
      }
      if (msec > 0) {
        this.timer = setTimeout(function () {
          var err = new Error(COLLECT_TIMEOUT);
          _this2.finalize(err, _this2.data);
        }, msec);
      }
      return this;
    }
  }, {
    key: 'done',
    value: function done(callback) {
      this.onDone = callback;
      return this;
    }
  }, {
    key: 'finalize',
    value: function finalize(key, err, data) {
      if (this.isDone) return this;
      if (this.onDone) {
        if (this.timer) {
          clearTimeout(this.timer);
          this.timer = null;
        }
        this.isDone = true;
        this.onDone(key, err, data);
      }
      return this;
    }
  }, {
    key: 'distinct',
    value: function distinct() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.isDistinct = value;
      return this;
    }
  }, {
    key: 'cancel',
    value: function cancel(err) {
      err = err || new Error(COLLECT_CANCELED);
      this.finalize(err, this.data);
      return this;
    }
  }, {
    key: 'then',
    value: function then(fulfilled, rejected) {
      var fulfill = common.once(fulfilled);
      var reject = common.once(rejected);
      this.onDone = function (err, result) {
        if (err) reject(err);else fulfill(result);
      };
      return this;
    }
  }]);

  return Collector;
}();

// Collector instance constructor
//   expected - number or array of string,
// Returns: Collector, instance


var collect = function collect(expected) {
  return new Collector(expected);
};

module.exports = { collect: collect };