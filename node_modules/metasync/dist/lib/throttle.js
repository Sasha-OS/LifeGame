'use strict';

var throttle = function throttle(
// Function throttling, executed once per interval
timeout, // number, msec interval
fn) // array (optional), arguments for fn
// Returns: function
{
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var timer = void 0;
  var wait = false;

  var execute = args ? function () {
    for (var _len2 = arguments.length, pars = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      pars[_key2] = arguments[_key2];
    }

    return pars ? fn.apply(undefined, args.concat(pars)) : fn.apply(undefined, args);
  } : function () {
    for (var _len3 = arguments.length, pars = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      pars[_key3] = arguments[_key3];
    }

    return pars ? fn.apply(undefined, pars) : fn();
  };

  var delayed = function delayed() {
    timer = undefined;
    if (wait) execute.apply(undefined, arguments);
  };

  var throttled = function throttled() {
    for (var _len4 = arguments.length, pars = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      pars[_key4] = arguments[_key4];
    }

    if (!timer) {
      timer = setTimeout.apply(undefined, [delayed, timeout].concat(pars));
      wait = false;
      execute.apply(undefined, pars);
    }
    wait = true;
  };

  return throttled;
};

var debounce = function debounce(
// Debounce function, delayed execution
timeout, // number, msec
fn) // array (optional), arguments for fn
{
  for (var _len5 = arguments.length, args = Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    args[_key5 - 2] = arguments[_key5];
  }

  var timer = void 0;

  var debounced = function debounced() {
    return args ? fn.apply(undefined, args) : fn();
  };

  var wrapped = function wrapped() {
    if (timer) clearTimeout(timer);
    timer = setTimeout(debounced, timeout);
  };

  return wrapped;
};

var FN_TIMEOUT = 'Metasync: asynchronous function timed out';

var timeout = function timeout(
// Set timeout for asynchronous function execution
_timeout, // number, time interval
fn, // function, to be executed
callback // function, callback on done
) {
  var finished = false;

  var timer = setTimeout(function () {
    finished = true;
    callback(new Error(FN_TIMEOUT));
  }, _timeout);

  fn(function () {
    if (!finished) {
      clearTimeout(timer);
      finished = true;
      callback.apply(undefined, arguments);
    }
  });
};

module.exports = {
  throttle: throttle,
  debounce: debounce,
  timeout: timeout
};